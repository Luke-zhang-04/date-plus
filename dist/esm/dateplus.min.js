/**
 * DatePlus v4.0.0-beta1 | A simple program to assist with date manipulation
 *
 * @license MIT
 * @copyright Copyright (C) 2020 - 2021 Luke Zhang
 */
const e = (e) => ({ms: e % 1e3, seconds: (e - (e % 1e3)) / 1e3}),
    t = e,
    r = (e) => {
        const t = (e % 1e3) % 1e3,
            r = ((e - (e % 1e3)) / 1e3) % 60
        return {ms: t, seconds: r, minutes: (e - 1e3 * r - t) / 6e4}
    },
    s = r,
    a = (e) => {
        const t = (e % 1e3) % 1e3,
            r = ((e - (e % 1e3)) / 1e3) % 60,
            s = ((e - 1e3 * r - t) / 6e4) % 60
        return {ms: t, seconds: r, minutes: s, hours: (e - 1e3 * s * 60 - 1e3 * r - t) / 36e5}
    },
    n = a,
    o = (e) => {
        const t = (e % 1e3) % 1e3,
            r = ((e - (e % 1e3)) / 1e3) % 60,
            s = ((e - 1e3 * r - t) / 6e4) % 60,
            a = ((e - 1e3 * s * 60 - 1e3 * r - t) / 36e5) % 24
        return {
            ms: t,
            seconds: r,
            minutes: s,
            hours: a,
            days: (e - 1e3 * a * 60 * 60 - 1e3 * s * 60 - 1e3 * r - t) / 864e5,
        }
    },
    u = (e) => 1e3 * e,
    h = u,
    d = (e) => r(u(e)),
    c = d,
    i = (e) => a(u(e)),
    y = i,
    m = (e) => o(u(e)),
    $ = m,
    M = (e) => 60 * e * 1e3,
    l = m,
    g = (e) => 60 * e,
    b = g,
    p = (e) => a(M(e)),
    f = p,
    D = (e) => o(M(e)),
    E = D,
    N = (e) => 60 * e * 60 * 1e3,
    S = N,
    P = (e) => 60 * e * 60,
    x = P,
    J = (e) => 60 * e,
    W = J,
    A = (e) => o(N(e)),
    F = A,
    H = (e) => 24 * e * 60 * 60 * 1e3,
    T = (e) => 24 * e * 60 * 60,
    k = T,
    v = (e) => 24 * e * 60,
    w = v,
    O = (e) => 24 * e,
    Z = O,
    j = {hrsPerDay: 24, minsPerHr: 60, secsPerMin: 60, msPerSec: 1e3},
    q = {
        0: "Sunday",
        1: "Monday",
        2: "Tuesday",
        3: "Wednesday",
        4: "Thursday",
        5: "Friday",
        6: "Saturday",
    },
    z = {
        0: "January",
        1: "Feburary",
        2: "March",
        3: "April",
        4: "May",
        5: "June",
        6: "July",
        7: "August",
        8: "September",
        9: "October",
        10: "November",
        11: "December",
    },
    B = 6e4,
    C = 36e5,
    G = 864e5,
    I = {y: "year", m: "month", d: "day"},
    K = (e, t = "/") => {
        let r = ""
        for (let s = 0; s < 2; s++)
            e.split(t)[s].length < 2
                ? (r += `0${e.split(t)[s]}${t}`)
                : (r += `${e.split(t)[s]}${t}`)
        return e.split(t)[2].length < 2 ? (r += `0${e.split(t)[2]}`) : (r += e.split(t)[2]), r
    },
    L = (e, t = "/") => {
        const r = e.getMonth().toString(),
            s = e.getDate().toString()
        return [e.getFullYear().toString(), r, s].join(t)
    },
    Q = (e, t = "y:m:d", r = "auto") => {
        let s = "/"
        if ("auto" === r) {
            for (const t of e)
                if (isNaN(Number(t))) {
                    s = t
                    break
                }
        } else s = r
        const a = e.split(s),
            n = t.split(":"),
            o = {}
        for (let e = 0; e < 3; e++) {
            o[I[n[e]]] = Number(a[e])
        }
        return o
    },
    R = (e) => q[e],
    U = (e) => z[e],
    V = (e, t) => -1 * Math.round((e.getTime() - t.getTime()) / 864e5),
    X = (e, t) => -1 * Math.round((e.getTime() - t.getTime()) / 36e5),
    Y = (e, t) => -1 * Math.round((e.getTime() - t.getTime()) / 6e4),
    _ = (e, t) => -1 * Math.round((e.getTime() - t.getTime()) / 1e3),
    ee = (e, t) => -1 * Math.round(e.getTime() - t.getTime()),
    te = (e, t, r = "about") => {
        const s = 2592e6,
            a = 31536e6,
            n = ee(e, t)
        let o
        return n < 6e4
            ? ((o = Math.round(n / 1e3)), `${o} second${1 === o ? "" : "s"} ago`)
            : n < 36e5
            ? ((o = Math.round(n / 6e4)), `${o} minute${1 === o ? "" : "s"} ago`)
            : n < 864e5
            ? ((o = Math.round(n / 36e5)), `${o} hour${1 === o ? "" : "s"} ago`)
            : n < s
            ? ((o = Math.round(n / 864e5)), `${r} ${o} day${1 === o ? "" : "s"} ago`)
            : n < a
            ? ((o = Math.round(n / s)), `${r} ${o} month${1 === o ? "" : "s"} ago`)
            : ((o = Math.round(n / a)), `${r} ${o} year${1 === o ? "" : "s"} ago`)
    },
    re = (e) => {
        const t = e.constructor(e.getTime())
        return t.setMinutes(e.getMinutes() - e.getTimezoneOffset()), t
    },
    se = () => {
        const e = new Date()
        return Date.UTC(
            e.getUTCFullYear(),
            e.getUTCMonth(),
            e.getUTCDate(),
            e.getUTCHours(),
            e.getUTCMinutes(),
            e.getUTCSeconds(),
            e.getUTCMilliseconds(),
        )
    }
class ae extends Date {
    constructor() {
        super(...arguments), (this.getElapsedString = (e, t = "about") => te(this, e, t))
    }
    addZeros(e = "/") {
        return K(this.formatDate(), e)
    }
    formatDate(e = "/") {
        return L(this, e)
    }
    getWordDay() {
        return q[this.getDay()]
    }
    getWordMonth() {
        return z[this.getMonth()]
    }
    getElapsedDays(e) {
        return V(this, e)
    }
    getElapsedHours(e) {
        return X(this, e)
    }
    getElapsedMinutes(e) {
        return Y(this, e)
    }
    getElapsedSeconds(e) {
        return _(this, e)
    }
    getElapsedMs(e) {
        return ee(this, e)
    }
}
export default ae
export {
    ae as DatePlus,
    K as addZeros,
    q as daysReference,
    Z as daysToHours,
    O as daysToHrs,
    v as daysToMins,
    w as daysToMinutes,
    H as daysToMs,
    k as daysToSeconds,
    T as daysToSecs,
    L as formatDate,
    Q as getDateValues,
    V as getElapsedDays,
    X as getElapsedHours,
    Y as getElapsedMinutes,
    ee as getElapsedMs,
    _ as getElapsedSeconds,
    te as getElapsedString,
    se as getUtcTime,
    R as getWordDay,
    U as getWordMonth,
    F as hoursToDays,
    W as hoursToMinutes,
    S as hoursToMs,
    x as hoursToSeconds,
    A as hrsToDays,
    J as hrsToMins,
    N as hrsToMs,
    P as hrsToSecs,
    D as minsToDays,
    p as minsToHrs,
    M as minsToMs,
    g as minsToSecs,
    E as minutesToDays,
    f as minutesToHours,
    l as minutesToMs,
    b as minutesToSeconds,
    z as monthsReference,
    o as msToDays,
    n as msToHours,
    a as msToHrs,
    r as msToMins,
    s as msToMinutes,
    t as msToSeconds,
    e as msToSecs,
    G as oneDay,
    C as oneHour,
    B as oneMinute,
    $ as secondsToDays,
    y as secondsToHours,
    c as secondsToMinutes,
    h as secondsToMs,
    m as secsToDays,
    i as secsToHrs,
    d as secsToMins,
    u as secsToMs,
    re as utcToLocal,
    j as values,
}
//# sourceMappingURL=dateplus.min.js.map
